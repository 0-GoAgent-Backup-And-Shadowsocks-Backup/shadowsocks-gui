// Generated by CoffeeScript 1.6.2
(function() {
  var divWarning, divWarningShown, gui, isRestarting, load, local, menu, quit, restartServer, saveChanges, show, tray, util;

  gui = require('nw.gui');

  util = require('util');

  divWarning = $('#divWarning');

  divWarningShown = false;

  util.log = function(s) {
    console.log(new Date().toLocaleString() + (" - " + s));
    if (!divWarningShown) {
      divWarning.show();
      divWarningShown = true;
    }
    return divWarning.text(s);
  };

  local = require('./shadowsocks-nodejs/local');

  saveChanges = function() {
    var config;

    config = {};
    $('input,select').each(function() {
      var key, val;

      key = $(this).attr('data-key');
      val = $(this).val();
      config[key] = val;
      return localStorage.setItem(key, val);
    });
    util.log('config saved');
    restartServer(config);
    return false;
  };

  load = function() {
    var config;

    config = {};
    $('input,select').each(function() {
      var key, val;

      key = $(this).attr('data-key');
      val = localStorage.getItem(key) || '';
      if (val) {
        $(this).val(val);
      }
      return config[key] = this.value;
    });
    return restartServer(config);
  };

  isRestarting = false;

  restartServer = function(config) {
    var e, start;

    if (config.server && +config.server_port && config.password && +config.local_port && config.method && +config.timeout) {
      if (isRestarting) {
        util.log("Already restarting");
        return;
      }
      isRestarting = true;
      start = function() {
        var e;

        try {
          isRestarting = false;
          util.log(require('./shadowsocks-nodejs/args').version);
          window.local = local.createServer(config.server, config.server_port, config.local_port, config.password, config.method, 1000 * (config.timeout || 600));
          return $('#divError').fadeOut();
        } catch (_error) {
          e = _error;
          return util.log(e);
        }
      };
      if (window.local != null) {
        try {
          return window.local.close(function() {
            return start();
          });
        } catch (_error) {
          e = _error;
          util.log(e);
          return start();
        }
      } else {
        return start();
      }
    } else {
      return $('#divError').fadeIn();
    }
  };

  $('#buttonSave').on('click', saveChanges);

  $('#buttonConsole').on('click', function() {
    return gui.Window.get().showDevTools();
  });

  tray = new gui.Tray({
    icon: 'menu_icon.png'
  });

  menu = new gui.Menu();

  show = new gui.MenuItem({
    type: 'normal',
    label: 'Show',
    click: function() {
      return gui.Window.get().show();
    }
  });

  quit = new gui.MenuItem({
    type: 'normal',
    label: 'Quit',
    click: function() {
      return gui.Window.get().close();
    }
  });

  show.add;

  menu.append(show);

  menu.append(quit);

  tray.menu = menu;

  window.tray = tray;

  gui.Window.get().on('minimize', function() {
    return gui.Window.get().hide();
  });

  load();

}).call(this);
