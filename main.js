// Generated by CoffeeScript 1.6.3
(function() {
  var addServer, args, divWarning, divWarningShown, gui, isRestarting, load, local, menu, quit, restartServer, saveChanges, serverHistory, show, tray, util,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  gui = require('nw.gui');

  util = require('util');

  args = require('./args');

  divWarning = $('#divWarning');

  divWarningShown = false;

  util.log = function(s) {
    console.log(new Date().toLocaleString() + (" - " + s));
    if (!divWarningShown) {
      divWarning.show();
      divWarningShown = true;
    }
    return divWarning.text(s);
  };

  local = require('shadowsocks');

  serverHistory = function() {
    return (localStorage['server_history'] || '').split('|');
  };

  addServer = function(serverIP) {
    var newServers, server, servers, _i, _len;
    servers = (localStorage['server_history'] || '').split('|');
    servers.push(serverIP);
    newServers = [];
    for (_i = 0, _len = servers.length; _i < _len; _i++) {
      server = servers[_i];
      if (server && __indexOf.call(newServers, server) < 0) {
        newServers.push(server);
      }
    }
    return localStorage['server_history'] = newServers.join('|');
  };

  $('#inputServerIP').typeahead({
    source: serverHistory
  });

  saveChanges = function() {
    var config;
    config = {};
    $('input,select').each(function() {
      var key, val;
      key = $(this).attr('data-key');
      val = $(this).val();
      config[key] = val;
      return localStorage.setItem(key, val);
    });
    util.log('config saved');
    restartServer(config);
    return false;
  };

  load = function() {
    var config;
    config = {};
    $('input,select').each(function() {
      var key, val;
      key = $(this).attr('data-key');
      val = localStorage.getItem(key) || '';
      if (val) {
        $(this).val(val);
      }
      return config[key] = this.value;
    });
    return restartServer(config);
  };

  isRestarting = false;

  restartServer = function(config) {
    var e, start;
    if (config.server && +config.server_port && config.password && +config.local_port && config.method && +config.timeout) {
      if (isRestarting) {
        util.log("Already restarting");
        return;
      }
      isRestarting = true;
      start = function() {
        var e;
        try {
          isRestarting = false;
          util.log('Starting shadowsocks...');
          window.local = local.createServer(config.server, config.server_port, config.local_port, config.password, config.method, 1000 * (config.timeout || 600));
          addServer(config.server);
          $('#divError').fadeOut();
          return gui.Window.get().minimize();
        } catch (_error) {
          e = _error;
          return util.log(e);
        }
      };
      if (window.local != null) {
        try {
          util.log('Restarting shadowsocks');
          window.local.close();
          return setTimeout(start, 1000);
        } catch (_error) {
          e = _error;
          isRestarting = false;
          return util.log(e);
        }
      } else {
        return start();
      }
    } else {
      return $('#divError').fadeIn();
    }
  };

  $('#buttonSave').on('click', saveChanges);

  $('#buttonConsole').on('click', function() {
    return gui.Window.get().showDevTools();
  });

  tray = new gui.Tray({
    icon: 'menu_icon.png'
  });

  menu = new gui.Menu();

  tray.on('click', function() {
    return gui.Window.get().show();
  });

  show = new gui.MenuItem({
    type: 'normal',
    label: 'Show',
    click: function() {
      return gui.Window.get().show();
    }
  });

  quit = new gui.MenuItem({
    type: 'normal',
    label: 'Quit',
    click: function() {
      return gui.Window.get().close();
    }
  });

  show.add;

  menu.append(show);

  menu.append(quit);

  tray.menu = menu;

  window.tray = tray;

  gui.Window.get().on('minimize', function() {
    return gui.Window.get().hide();
  });

  load();

}).call(this);
